services:
  minio:
    image: minio/minio:RELEASE.2023-01-02T09-40-09Z
    ports:
      - 9100:9000
      - 9101:9001
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: miniotest
    command: server --console-address ":9001" /data
    healthcheck:
      test: curl http://minio:9000/minio/health/live
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 2s

  createbucket:
    image: minio/mc:RELEASE.2022-12-24T15-21-38Z
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://minio:9000 minio miniotest;
      /usr/bin/mc mb myminio/epp;
      /usr/bin/mc mb myminio/meca;
      exit 0;
      "

  loadbucket:
    image: minio/mc:RELEASE.2022-12-24T15-21-38Z
    depends_on:
      createbucket:
        condition: service_completed_successfully
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://minio:9000 minio miniotest;
      /usr/bin/mc cp --recursive /mock-meca/* myminio/meca/;
      exit 0;
      "
    volumes:
      - ./mock-data/meca:/mock-meca

  temporal-db:
    image: percona/percona-server:8.0.34-26.1-multi
    ports:
      - 3306:3306
    environment:
      MYSQL_ROOT_PASSWORD: testmysql
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      start_period: 2s
      interval: 5s
      timeout: 5s
      retries: 10


  temporal:
    image: temporalio/auto-setup:1.22.6
    ports:
      - 7233:7233
    environment:
      DB: mysql8
      MYSQL_SEEDS: temporal-db
      MYSQL_USER: root
      MYSQL_PWD: testmysql
      DBNAME: temporal
      VISIBILITY_DBNAME: "temporalvisibility"
      DEFAULT_NAMESPACE: default
      DEFAULT_NAMESPACE_RETENTION: 3d
      SKIP_ADD_CUSTOM_SEARCH_ATTRIBUTES: true
      TEMPORAL_ADDRESS: temporal:7233
    healthcheck:
      test: temporal operator namespace describe default
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 2s
    depends_on:
      temporal-db:
        condition: service_healthy

  temporal-setup-search:
    image: temporalio/admin-tools:1.23.0
    environment:
      TEMPORAL_ADDRESS: temporal:7233
    entrypoint: bash -c 'temporal operator search-attribute create --name ManuscriptId --type Text && temporal operator search-attribute create --name DocmapURL --type Text'
    depends_on:
      temporal:
        condition: service_healthy


  temporal-ui:
    image: temporalio/ui:2.25.0
    ports:
      - 8233:8233
    environment:
      TEMPORAL_ADDRESS: temporal:7233
      TEMPORAL_UI_PORT: 8233
    healthcheck:
      test: curl http://localhost:8233 -I
    depends_on:
      temporal:
        condition: service_healthy

  mongodb:
    image: mongo:7.0.8
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: testtest
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb:27017/test -u admin -p testtest --authenticationDatabase admin --quiet
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 2s

  api:
    image: ghcr.io/elifesciences/enhanced-preprints-server:master-d11b24e5-20240406.0347
    healthcheck:
      test: sh -c 'apk add curl; curl http://api:3000/'
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 2s
    depends_on:
      mongodb:
        condition: service_healthy
    environment:
      REPO_TYPE: MongoDB
      REPO_CONNECTION: mongodb:27017
      REPO_USERNAME: admin
      REPO_PASSWORD: testtest
    ports:
      - 3000:3000

  client:
    image: ghcr.io/elifesciences/enhanced-preprints-client:master-45fbcf0d-20240406.0401
    healthcheck:
      test: sh -c 'apk add curl; curl -X POST http://client:3000/'
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    environment:
      NEXT_PUBLIC_SITE_NAME: ${NEXT_PUBLIC_SITE_NAME:-elife}
      API_SERVER: http://api:3000
      NEXT_PUBLIC_IMAGE_SERVER: /iiif
      IS_AUTOMATED: true
    depends_on:
      api:
        condition: service_healthy
    ports:
      - 3001:3000

  xslt:
    image: ghcr.io/elifesciences/enhanced-preprints-biorxiv-xslt-api:master-5b8b84af-20240404.1501
    restart: always
    ports:
      - 3004:80
    healthcheck:
      test: "curl  -H 'X-Passthrough: true' -f http://localhost:80/ -d '<test></test>' || exit 1"
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 5s

  encoda:
    image: ghcr.io/elifesciences/enhanced-preprints-encoda:master-2138587f-20240403.0703
    healthcheck:
      test: "wget --post-data '<test></test>' -O - http://localhost:3000/"
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 3s
    restart: always
    ports:
      - 3005:3000

  worker: &worker-config
    image: ghcr.io/elifesciences/enhanced-preprints-import-worker:master-51fd5947-20240407.1246
    depends_on:
      createbucket:
        condition: service_completed_successfully
      loadbucket:
        condition: service_completed_successfully
      temporal:
        condition: service_healthy
      temporal-setup-search:
        condition: service_completed_successfully
      xslt:
        condition: service_healthy
      encoda:
        condition: service_healthy
      api:
        condition: service_healthy
    environment: &worker-env
      EPP_SERVER_URI: http://api:3000
      TEMPORAL_SERVER: temporal:7233
      TEMPORAL_TASK_QUEUE: epp

      # EPP S3 bucket
      S3_ENDPOINT: http://minio:9000
      AWS_ACCESS_KEY_ID: minio
      AWS_SECRET_ACCESS_KEY: miniotest
      BUCKET_NAME: epp

      # Meca S3 Bucket (on minio)
      MECA_S3_ENDPOINT: http://minio:9000
      MECA_AWS_ACCESS_KEY_ID: minio
      MECA_AWS_SECRET_ACCESS_KEY: miniotest

      # control concurrency
      TEMPORAL_MAX_CONCURRENT_ACTIVITY_TASK_EXECUTIONS: "25"
      TEMPORAL_MAX_CONCURRENT_WORKFLOW_TASK_EXECUTIONS: "5"
      TEMPORAL_MAX_CACHED_WORKFLOWS: "5"

      # Other services
      XSLT_TRANSFORM_ADDRESS: http://wiremock:8080/xslt-transform
      ENCODA_TRANSFORM_ADDRESS: http://encoda:3000

    restart: on-failure:5
    command:
      - yarn
      - start:worker
    healthcheck: &worker-healthcheck
      test: curl -s http://localhost:9464/metrics  | grep 'temporal_worker_start{namespace="default",service_name="temporal-core-sdk",task_queue="epp"}'  | grep 1
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 2s

  worker-import-docmaps:
    <<: *worker-config
    environment:
      <<: *worker-env
      TEMPORAL_TASK_QUEUE: import-docmaps
    healthcheck:
      <<: *worker-healthcheck
      test: curl -s http://localhost:9464/metrics  | grep 'temporal_worker_start{namespace="default",service_name="temporal-core-sdk",task_queue="import-docmaps"}'  | grep 1

  wiremock:
    image: wiremock/wiremock:3.5.2-1
    ports:
      - 8080:8080
    healthcheck:
      test: curl http://wiremock:8080/__admin/health
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s
    command:
      --local-response-templating
    volumes:
      - ./wiremock/mappings:/home/wiremock/mappings
      - ./mock-data/docmaps:/home/wiremock/__files/docmaps
