name: CI Pipeline

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
  push:
    branches:
      - master
    tags:
      - '*'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Read .nvmrc
        run: echo "NVMRC=$(cat .nvmrc)" >> $GITHUB_OUTPUT
        id: nvm
      - name: Use Node.js (.nvmrc)
        uses: actions/setup-node@v3
        with:
          node-version: "${{ steps.nvm.outputs.NVMRC }}"
          cache: yarn
      - name: yarn install
        run: yarn
      - name: Lint
        run: yarn lint
      - name: install browsers
        run: yarn playwright install
      - name: Bring up EPP
        run: docker compose up --wait
      - name: run tests
        run: yarn test
      - name: Playwright report upload
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/index.html
      - name: Temporal workflow status
        if: failure()
        run: |
          curl -LO https://github.com/temporalio/tctl/releases/download/v1.18.0/tctl_1.18.0_linux_amd64.tar.gz
          tar -xf tctl_1.18.0_linux_amd64.tar.gz
          echo "Running Workflows"
          docmapWorkflows=$(./tctl wf list --ps 1000 --open -wt importDocmap --pjson | jq '.[].execution.workflowId' -r)
          for workflowId in $docmapWorkflows; do
            ./tctl wf describe -praw -wid $workflowId | jq -r '"'$workflowId'\t\t\t"+(.|select(.pendingActivities != null)|.pendingActivities[]|.activityType.name+"\t"+.lastFailure.message)'

            childWorkflows=$(./tctl wf describe -praw -wid $workflowId | jq -r '.|select(.pendingChildren != null)|.pendingChildren[].workflowId')

            for childWorkflowId in $childWorkflows; do
              echo -n "$workflowId"
              ./tctl wf describe -praw -wid $childWorkflowId | jq -r '"\t"+.workflowExecutionInfo.execution.workflowId+"\t"+.workflowExecutionInfo.type.name+"\t"+(.pendingActivities[]|.activityType.name+"\t"+.lastFailure.message)'
            done;
          done;

          echo "Successful workflows"
          docmapWorkflows=$(./tctl wf list --ps 1000 -wt importDocmap --pjson | jq '.[].execution.workflowId' -r)
          for workflowId in $docmapWorkflows; do
            echo $workflowId;
          done;
      - name: Failure Slack Notification
        uses: slackapi/slack-github-action@v1.24.0
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_E2E_NOTIFICATION_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        with:
          payload: |
            {
              "text": ":fire: EPP GitHub Action e2e test failure",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": ":fire: EPP e2e test failure",
                    "emoji": true
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "<${{ github.event.pull_request.html_url || github.event.head_commit.url }}|View Pull Request>"
                  }
                }
              ]
            }
  approve-images:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v3
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Get images from docker-compose
        run: |
          echo "SERVER_IMAGE_AND_TAG=$(yq '.services.api.image' docker-compose.yaml)" >> $GITHUB_ENV
          echo "CLIENT_IMAGE_AND_TAG=$(yq '.services.client.image' docker-compose.yaml)" >> $GITHUB_ENV
          echo "IMPORT_IMAGE_AND_TAG=$(yq '.services.worker.image' docker-compose.yaml)" >> $GITHUB_ENV
          echo "XSLT_IMAGE_AND_TAG=$(yq '.services.xslt.image' docker-compose.yaml)" >> $GITHUB_ENV
      - name: create new manifest for accepted tags
        run: |
          docker buildx imagetools create -t $CLIENT_IMAGE_AND_TAG-approved $CLIENT_IMAGE_AND_TAG
          docker buildx imagetools create -t $SERVER_IMAGE_AND_TAG-approved $SERVER_IMAGE_AND_TAG
          docker buildx imagetools create -t $IMPORT_IMAGE_AND_TAG-approved $IMPORT_IMAGE_AND_TAG
          docker buildx imagetools create -t $XSLT_IMAGE_AND_TAG-approved $XSLT_IMAGE_AND_TAG
      - name: Success Slack Notification
        uses: slackapi/slack-github-action@v1.24.0
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_E2E_NOTIFICATION_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        with:
          payload: |
            {
              "text": ":tada: EPP GitHub Action e2e test success and new images approved",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": ":tada: EPP GitHub Action e2e test success and new images approved",
                    "emoji": true
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Client image:*\n ${{ env.CLIENT_IMAGE_AND_TAG }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Server image:*\n ${{ env.SERVER_IMAGE_AND_TAG }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*import image:*\n ${{ env.IMPORT_IMAGE_AND_TAG }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*xslt image:*\n ${{ env.XSLT_IMAGE_AND_TAG }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "<${{ github.event.pull_request.html_url || github.event.head_commit.url }}|View Commit>"
                  }
                }
              ]
            }
      - name: Failure Slack Notification
        uses: slackapi/slack-github-action@v1.24.0
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_E2E_NOTIFICATION_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        with:
          payload: |
            {
              "text": ":fire: EPP GitHub Action e2e test success, but new images failed to approved",
              "blocks": [
              {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": ":fire: EPP GitHub Action e2e test success, but new images failed to approved",
                    "emoji": true
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "<${{ github.event.pull_request.html_url || github.event.head_commit.url }}|View Commit>"
                  }
                }
              ]
            }
